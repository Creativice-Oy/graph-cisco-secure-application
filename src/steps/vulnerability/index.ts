import {
  createDirectRelationship,
  IntegrationStep,
  IntegrationStepExecutionContext,
  RelationshipClass,
} from '@jupiterone/integration-sdk-core';

import { createAPIClient } from '../../client';
import { IntegrationConfig } from '../../config';
import { Steps, Entities, Relationships } from '../constants';
import { createVulnerabilityEntity, getVulnerabilityKey } from './converter';

export async function fetchVulnerabilities({
  instance,
  jobState,
}: IntegrationStepExecutionContext<IntegrationConfig>) {
  const apiClient = createAPIClient(instance.config);

  await jobState.iterateEntities(
    { _type: Entities.IMAGE._type },
    async (imageEntity) => {
      await apiClient.iterateVulnerabilities(
        imageEntity.id as string,
        async (vulnerability) => {
          if (!(await jobState.hasKey(getVulnerabilityKey(vulnerability.id)))) {
            const vulnerabilityEntity = await jobState.addEntity(
              createVulnerabilityEntity(vulnerability),
            );
            await jobState.addRelationship(
              createDirectRelationship({
                _class: RelationshipClass.HAS,
                from: imageEntity,
                to: vulnerabilityEntity,
              }),
            );
          }
        },
      );
    },
  );
}

export const vulnerabilitySteps: IntegrationStep<IntegrationConfig>[] = [
  {
    id: Steps.VULNERABILITIES,
    name: 'Fetch Vulnerabilities',
    entities: [Entities.VULNERABILITY],
    relationships: [Relationships.IMAGE_HAS_VULNERABILITY],
    dependsOn: [Steps.IMAGES],
    executionHandler: fetchVulnerabilities,
  },
];
